// services/proyectosApi.js
// üîß CONFIGURACI√ìN REUTILIZABLE - Cambia estos valores para otros CRUDs
const API_CONFIG = {
  baseURL: import.meta.env.VITE_API_URL,
  endpoint: 'proyectos', // üëà Cambiar por 'herramientas', 'empleados', etc.
  timeout: 10000
};

class ProyectosAPI {
  constructor() {
    this.baseURL = `${API_CONFIG.baseURL}/${API_CONFIG.endpoint}`;
  }

  // üîê Obtener token de autenticaci√≥n
  getAuthHeaders() {
    const token = localStorage.getItem('token');
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : ''
    };
  }

  // üõ†Ô∏è M√©todo base para hacer requests
  async makeRequest(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: this.getAuthHeaders(),
        ...options,
        timeout: API_CONFIG.timeout
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `HTTP Error: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error('‚ùå API Error:', error);
      throw error;
    }
  }

  // üìã OBTENER TODOS LOS PROYECTOS
  async obtenerProyectos() {
    console.log('üîç Obteniendo proyectos...');
    
    try {
      const data = await this.makeRequest(this.baseURL);
      console.log(`‚úÖ ${data.data.length} proyectos obtenidos`);
      
      // ‚≠ê NOTA: El backend ahora devuelve 'numCotizacion' en cada proyecto
      // Ejemplo de estructura de datos recibida:
      // {
      //   id: 1,
      //   nombre: "Proyecto X",
      //   numCotizacion: 12345,  // ‚≠ê NUEVO CAMPO
      //   cotizacion: 50000.00,
      //   clienteNombre: "Juan P√©rez",
      //   ...
      // }
      
      return data;
    } catch (error) {
      console.error('‚ùå Error al obtener proyectos:', error);
      throw new Error('No se pudieron cargar los proyectos');
    }
  }

  // ‚ûï CREAR NUEVO PROYECTO
  async crearProyecto(proyectoData) {
    console.log('‚ûï Creando proyecto:', proyectoData);
    
    try {
      // Validaciones b√°sicas en frontend
      if (!proyectoData.nombre || !proyectoData.responsableId || !proyectoData.clienteId) {
        throw new Error('Nombre, responsable y cliente son obligatorios');
      }

      // ‚≠ê VALIDACI√ìN: Si se proporciona numCotizacion, debe ser un n√∫mero entero positivo
      if (proyectoData.numCotizacion !== undefined && proyectoData.numCotizacion !== null && proyectoData.numCotizacion !== '') {
        const numCot = parseInt(proyectoData.numCotizacion);
        
        if (isNaN(numCot)) {
          throw new Error('El n√∫mero de cotizaci√≥n debe ser un n√∫mero entero v√°lido');
        }
        
        if (numCot < 0) {
          throw new Error('El n√∫mero de cotizaci√≥n debe ser un n√∫mero positivo');
        }

        // Convertir a entero para asegurar que se env√≠e correctamente
        proyectoData.numCotizacion = numCot;
      } else {
        // Si est√° vac√≠o, enviarlo como null
        proyectoData.numCotizacion = null;
      }

      const data = await this.makeRequest(this.baseURL, {
        method: 'POST',
        body: JSON.stringify(proyectoData)
      });
      
      console.log('‚úÖ Proyecto creado exitosamente');
      return data;
    } catch (error) {
      console.error('‚ùå Error al crear proyecto:', error);
      
      // ‚≠ê MANEJO ESPECIAL DE ERRORES PARA N√öMERO DE COTIZACI√ìN DUPLICADO
      if (error.message && error.message.includes('n√∫mero de cotizaci√≥n')) {
        // El error viene del backend, mantenerlo tal cual para mostrarlo al usuario
        throw error;
      }
      
      throw error;
    }
  }

  // ‚úèÔ∏è ACTUALIZAR PROYECTO
  async actualizarProyecto(id, proyectoData) {
    console.log('‚úèÔ∏è Actualizando proyecto:', id);
    
    try {
      if (!proyectoData.nombre || !proyectoData.responsableId || !proyectoData.clienteId) {
        throw new Error('Nombre, responsable y cliente son obligatorios');
      }

      // ‚≠ê VALIDACI√ìN: Si se proporciona numCotizacion, debe ser un n√∫mero entero positivo
      if (proyectoData.numCotizacion !== undefined && proyectoData.numCotizacion !== null && proyectoData.numCotizacion !== '') {
        const numCot = parseInt(proyectoData.numCotizacion);
        
        if (isNaN(numCot)) {
          throw new Error('El n√∫mero de cotizaci√≥n debe ser un n√∫mero entero v√°lido');
        }
        
        if (numCot < 0) {
          throw new Error('El n√∫mero de cotizaci√≥n debe ser un n√∫mero positivo');
        }

        // Convertir a entero para asegurar que se env√≠e correctamente
        proyectoData.numCotizacion = numCot;
      } else {
        // Si est√° vac√≠o, enviarlo como null
        proyectoData.numCotizacion = null;
      }

      const data = await this.makeRequest(`${this.baseURL}/${id}`, {
        method: 'PUT',
        body: JSON.stringify(proyectoData)
      });
      
      console.log('‚úÖ Proyecto actualizado exitosamente');
      return data;
    } catch (error) {
      console.error('‚ùå Error al actualizar proyecto:', error);
      
      // ‚≠ê MANEJO ESPECIAL DE ERRORES PARA N√öMERO DE COTIZACI√ìN DUPLICADO
      if (error.message && error.message.includes('n√∫mero de cotizaci√≥n')) {
        // El error viene del backend, mantenerlo tal cual para mostrarlo al usuario
        throw error;
      }
      
      throw error;
    }
  }

  // üóëÔ∏è ELIMINAR PROYECTO (soft delete)
  async eliminarProyecto(id) {
    console.log('üóëÔ∏è Eliminando proyecto:', id);
    
    try {
      const data = await this.makeRequest(`${this.baseURL}/${id}`, {
        method: 'DELETE'
      });
      
      console.log('‚úÖ Proyecto eliminado exitosamente');
      return data;
    } catch (error) {
      console.error('‚ùå Error al eliminar proyecto:', error);
      throw error;
    }
  }

  // üìä OBTENER ESTAD√çSTICAS
  async obtenerEstadisticas() {
    console.log('üìä Obteniendo estad√≠sticas de proyectos...');
    
    try {
      const data = await this.makeRequest(`${this.baseURL}/estadisticas`);
      console.log('‚úÖ Estad√≠sticas obtenidas');
      return data;
    } catch (error) {
      console.error('‚ùå Error al obtener estad√≠sticas:', error);
      throw new Error('No se pudieron cargar las estad√≠sticas');
    }
  }

  // üîç BUSCAR PROYECTOS (m√©todo helper para filtrado local)
  filtrarProyectos(proyectos, termino) {
    if (!termino) return proyectos;
    
    const terminoLower = termino.toLowerCase();
    return proyectos.filter(proyecto => 
      proyecto.nombre.toLowerCase().includes(terminoLower) ||
      (proyecto.descripcion && proyecto.descripcion.toLowerCase().includes(terminoLower)) ||
      (proyecto.clienteNombre && proyecto.clienteNombre.toLowerCase().includes(terminoLower)) ||
      (proyecto.responsableNombre && proyecto.responsableNombre.toLowerCase().includes(terminoLower)) ||
      (proyecto.ubicacion && proyecto.ubicacion.toLowerCase().includes(terminoLower)) ||
      // ‚≠ê NUEVO: Filtrar tambi√©n por n√∫mero de cotizaci√≥n
      (proyecto.numCotizacion && proyecto.numCotizacion.toString().includes(termino))
    );
  }

  // üîÑ VALIDAR CONEXI√ìN CON API
  async validarConexion() {
    try {
      const response = await fetch(`${API_CONFIG.baseURL}`, {
        headers: this.getAuthHeaders()
      });
      return response.ok;
    } catch {
      return false;
    }
  }

  // ‚≠ê NUEVO: VALIDAR SI UN N√öMERO DE COTIZACI√ìN YA EXISTE
  // (Opcional - El backend ya lo valida, pero podemos usar esto para validaci√≥n en tiempo real)
  async validarNumCotizacion(numCotizacion, proyectoIdActual = null) {
    try {
      // Esta ser√≠a una llamada opcional al backend para validar en tiempo real
      // Por ahora, dejaremos que el backend maneje la validaci√≥n completamente
      
      console.log('üîç Validando n√∫mero de cotizaci√≥n:', numCotizacion);
      
      // Validaci√≥n b√°sica local
      if (!numCotizacion || numCotizacion === '') {
        return { valido: true, mensaje: '' }; // Vac√≠o es v√°lido (opcional)
      }

      const numCot = parseInt(numCotizacion);
      
      if (isNaN(numCot)) {
        return { valido: false, mensaje: 'El n√∫mero de cotizaci√≥n debe ser un n√∫mero entero' };
      }
      
      if (numCot < 0) {
        return { valido: false, mensaje: 'El n√∫mero de cotizaci√≥n debe ser positivo' };
      }

      // La validaci√≥n de unicidad la maneja el backend al guardar
      return { valido: true, mensaje: '' };
      
    } catch (error) {
      console.error('‚ùå Error al validar n√∫mero de cotizaci√≥n:', error);
      return { valido: false, mensaje: 'Error al validar el n√∫mero de cotizaci√≥n' };
    }
  }
}

export default new ProyectosAPI();

// üìã GU√çA DE USO DEL NUEVO CAMPO numCotizacion:
/*
‚≠ê CAMBIOS REALIZADOS:

1. ‚úÖ El backend ahora devuelve 'numCotizacion' en obtenerProyectos()
2. ‚úÖ Validaci√≥n en crearProyecto() - verifica que sea un n√∫mero entero positivo
3. ‚úÖ Validaci√≥n en actualizarProyecto() - verifica que sea un n√∫mero entero positivo
4. ‚úÖ Conversi√≥n autom√°tica a entero antes de enviar al backend
5. ‚úÖ Manejo de valores null/vac√≠os (el campo es opcional)
6. ‚úÖ Manejo especial de errores de duplicaci√≥n del backend
7. ‚úÖ Incluido en filtrarProyectos() para b√∫squeda por n√∫mero de cotizaci√≥n
8. ‚úÖ M√©todo helper validarNumCotizacion() para validaci√≥n en tiempo real (opcional)

üìù EJEMPLO DE USO EN EL FRONTEND:

// CREAR PROYECTO CON N√öMERO DE COTIZACI√ìN
const nuevoProyecto = {
  nombre: "Edificio Central",
  descripcion: "Construcci√≥n de edificio",
  responsableId: 1,
  clienteId: 5,
  ubicacion: "Guatemala",
  numCotizacion: 12345,  // ‚≠ê NUEVO CAMPO - Debe ser √∫nico
  cotizacion: 500000.00,
  aprobado: false,
  status: "planificado"
};

await proyectosApi.crearProyecto(nuevoProyecto);

// ACTUALIZAR PROYECTO
await proyectosApi.actualizarProyecto(proyectoId, {
  ...proyectoData,
  numCotizacion: 54321  // ‚≠ê Cambiar n√∫mero de cotizaci√≥n
});

// BUSCAR POR N√öMERO DE COTIZACI√ìN
const proyectosFiltrados = proyectosApi.filtrarProyectos(proyectos, "12345");

‚ö†Ô∏è NOTAS IMPORTANTES:

- El campo es OPCIONAL (puede ser null)
- Debe ser un n√∫mero entero positivo
- √öNICO en toda la base de datos
- El backend rechazar√° duplicados con mensaje claro
- Si est√° vac√≠o en el formulario, se env√≠a como null
*/