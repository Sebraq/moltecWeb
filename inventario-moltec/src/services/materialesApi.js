// services/materialesApi.js
// üîß CONFIGURACI√ìN REUTILIZABLE - Cambia estos valores para otros CRUDs
const API_CONFIG = {
  baseURL: import.meta.env.VITE_API_URL,
  endpoint: "materiales", // üëà Cambiar por 'herramientas', 'empleados', etc.
  timeout: 10000,
};

class MaterialesAPI {
  constructor() {
    this.baseURL = `${API_CONFIG.baseURL}/${API_CONFIG.endpoint}`;
  }

  // üîë Obtener token de autenticaci√≥n
  getAuthHeaders() {
    const token = localStorage.getItem("token");
    return {
      "Content-Type": "application/json",
      Authorization: token ? `Bearer ${token}` : "",
    };
  }

  // üõ†Ô∏è M√©todo base para hacer requests
  async makeRequest(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: this.getAuthHeaders(),
        ...options,
        timeout: API_CONFIG.timeout,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || `HTTP Error: ${response.status}`);
      }

      return data;
    } catch (error) {
      console.error("‚ùå API Error:", error);
      throw error;
    }
  }

  // üìã OBTENER TODOS LOS MATERIALES
  async obtenerMateriales() {
    console.log("üì¶ Obteniendo materiales...");

    try {
      const data = await this.makeRequest(this.baseURL);
      console.log(`‚úÖ ${data.data.length} materiales obtenidos`);
      return data;
    } catch (error) {
      console.error("‚ùå Error al obtener materiales:", error);
      throw new Error("No se pudieron cargar los materiales");
    }
  }

  // ‚ûï CREAR NUEVO MATERIAL
  async crearMaterial(materialData) {
    console.log("‚ûï Creando material:", materialData);

    try {
      // Validaciones b√°sicas en frontend
      if (!materialData.nombre || !materialData.medida) {
        throw new Error("Nombre y medida son obligatorios");
      }

      const data = await this.makeRequest(this.baseURL, {
        method: "POST",
        body: JSON.stringify(materialData),
      });

      console.log("‚úÖ Material creado exitosamente");
      return data;
    } catch (error) {
      console.error("‚ùå Error al crear material:", error);
      throw error;
    }
  }

  // ‚úèÔ∏è ACTUALIZAR MATERIAL
  async actualizarMaterial(id, materialData) {
    console.log(`‚úèÔ∏è Actualizando material ID: ${id}`, materialData);

    try {
      if (!materialData.nombre || !materialData.medida) {
        throw new Error("Nombre y medida son obligatorios");
      }

      const data = await this.makeRequest(`${this.baseURL}/${id}`, {
        method: "PUT",
        body: JSON.stringify(materialData),
      });

      console.log("‚úÖ Material actualizado exitosamente");
      return data;
    } catch (error) {
      console.error("‚ùå Error al actualizar material:", error);
      throw error;
    }
  }

  // üì• INGRESO DE STOCK
  async ingresoStock(id, cantidad, motivo = "") {
    console.log(`üì• Registrando ingreso - ID: ${id}, Cantidad: ${cantidad}`);

    try {
      if (!cantidad || cantidad <= 0) {
        throw new Error("La cantidad debe ser mayor a 0");
      }

      const data = await this.makeRequest(`${this.baseURL}/${id}/ingreso`, {
        method: "PATCH",
        body: JSON.stringify({ cantidad, motivo }),
      });

      console.log("‚úÖ Ingreso registrado exitosamente");
      return data;
    } catch (error) {
      console.error("‚ùå Error al registrar ingreso:", error);
      throw error;
    }
  }

  // üì§ SALIDA DE STOCK
  async salidaStock(id, cantidad, motivo = "") {
    console.log(`üì§ Registrando salida - ID: ${id}, Cantidad: ${cantidad}`);

    try {
      if (!cantidad || cantidad <= 0) {
        throw new Error("La cantidad debe ser mayor a 0");
      }

      const data = await this.makeRequest(`${this.baseURL}/${id}/salida`, {
        method: "PATCH",
        body: JSON.stringify({ cantidad, motivo }),
      });

      console.log("‚úÖ Salida registrada exitosamente");
      return data;
    } catch (error) {
      console.error("‚ùå Error al registrar salida:", error);
      throw error;
    }
  }

  // üóëÔ∏è ELIMINAR MATERIAL
  async eliminarMaterial(id) {
    console.log(`üóëÔ∏è Eliminando material ID: ${id}`);

    try {
      const data = await this.makeRequest(`${this.baseURL}/${id}`, {
        method: "DELETE",
      });

      console.log("‚úÖ Material eliminado exitosamente");
      return data;
    } catch (error) {
      console.error("‚ùå Error al eliminar material:", error);
      throw error;
    }
  }

  // üìä OBTENER ESTAD√çSTICAS
  async obtenerEstadisticas() {
    console.log("üìä Obteniendo estad√≠sticas...");

    try {
      const data = await this.makeRequest(`${this.baseURL}/estadisticas`);
      console.log("‚úÖ Estad√≠sticas obtenidas");
      return data;
    } catch (error) {
      console.error("‚ùå Error al obtener estad√≠sticas:", error);
      throw new Error("No se pudieron cargar las estad√≠sticas");
    }
  }

  // üîç BUSCAR MATERIALES (m√©todo helper para filtrado local)
  buscarMateriales(materiales, termino) {
    if (!termino) return materiales;

    const terminoLower = termino.toLowerCase();
    return materiales.filter(
      (material) =>
        material.nombre.toLowerCase().includes(terminoLower) ||
        (material.descripcion &&
          material.descripcion.toLowerCase().includes(terminoLower)) ||
        material.medida.toLowerCase().includes(terminoLower)
    );
  }

  // üéØ DETERMINAR ESTADO DEL STOCK (m√©todo helper)
  getEstadoStock(cantidadActual, cantidadMinima) {
    if (cantidadActual <= cantidadMinima) {
      return {
        texto: "Stock Cr√≠tico",
        color: "#e53e3e",
        bg: "#fed7d7",
        //icon: 'üî¥'
      };
    } else if (cantidadActual <= cantidadMinima * 2) {
      return {
        texto: "Stock Bajo",
        color: "#dd6b20",
        bg: "#feebc8",
        //icon: 'üü°'
      };
    } else {
      return {
        texto: "Stock Normal",
        color: "#38a169",
        bg: "#c6f6d5",
        //icon: 'üü¢'
      };
    }
  }

  // üìä OBTENER MOVIMIENTOS DE HERRAMIENTAS
  async obtenerMovimientosHerramientas() {
    console.log("üìä Obteniendo movimientos de herramientas...");

    try {
      const data = await this.makeRequest(`${this.baseURL}/movimientos`);
      console.log(
        `‚úÖ ${data.data.length} movimientos de herramientas obtenidos`
      );
      return data;
    } catch (error) {
      console.error("‚ùå Error al obtener movimientos de herramientas:", error);
      throw new Error("No se pudieron cargar los movimientos de herramientas");
    }
  }

  // üìä OBTENER MOVIMIENTOS DE MATERIALES
  async obtenerMovimientosMateriales() {
    console.log("üìä Obteniendo movimientos de materiales...");

    try {
      const data = await this.makeRequest(`${this.baseURL}/movimientos`);
      console.log(`‚úÖ ${data.data.length} movimientos de materiales obtenidos`);
      return data;
    } catch (error) {
      console.error("‚ùå Error al obtener movimientos de materiales:", error);
      throw new Error("No se pudieron cargar los movimientos de materiales");
    }
  }

  // üîÑ VALIDAR CONEXI√ìN CON API
  async validarConexion() {
    try {
      const response = await fetch(`${API_CONFIG.baseURL}`, {
        headers: this.getAuthHeaders(),
      });
      return response.ok;
    } catch {
      return false;
    }
  }
}

// üìù GU√çA DE ADAPTACI√ìN PARA OTROS CRUDs:
/*
üîß PARA ADAPTAR A OTRA TABLA (ej: herramientas):

1. Cambiar API_CONFIG:
   endpoint: 'herramientas'

2. Cambiar nombres de clase y m√©todos:
   MaterialesAPI ‚Üí HerramientasAPI
   crearMaterial ‚Üí crearHerramienta
   etc.

3. Adaptar validaciones seg√∫n los campos de la nueva tabla

4. Los m√©todos base (makeRequest, getAuthHeaders, etc.) son reutilizables

EJEMPLO PARA HERRAMIENTAS:
- API_CONFIG.endpoint = 'herramientas'
- Cambiar mensajes de console.log
- Adaptar validaciones espec√≠ficas de herramientas
- Todo lo dem√°s queda igual
*/

export default new MaterialesAPI();
